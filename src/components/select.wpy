<template>
  <view class="select-box">
    <view class="select-current" catchtap="openClose">
      <text class="current-name">{{current.name}}</text>
    </view>
    <view class="option-list" wx:if="{{isShow}}" catchtap="optionTap">
      <!-- <text class="option"
        data-id="{{current.id}}"
        data-name="{{current.name}}">{{current.name}}
      </text> -->
      <text class="option"
        wx:for="{{result}}"
        wx:key="{{item.id}}"
        data-id="{{item.id}}"
        data-name="{{item.name}}">{{item.name}}
      </text>
    </view>
  </view>
</template>
<script>
import wepy from 'wepy'
import { connect } from 'wepy-redux'
import { changeLanguage } from '../store/actions'
@connect({
  current (state) {
    return state.changeLanguage.curLanguage
  }
}, {
  changeLanguage
})
export default class Select extends wepy.component {
  config = {
    navigationBarTitleText: 'Index'
  }
  props = {
    // options: {
    //   type: Array,
    //   value: []
    // },
    // current: {
    //   type: Object,
    //   value: {
    //     id: '001',
    //     name: 'English'
    //   }
    // }
    // key: {
    //   type: String,
    //   value: 'id'
    // },
    // text: {
    //   type: String,
    //   value: 'name'
    // }
  }
  data = {
    result: [{
      id: '000',
      name: 'Chinese'
    }, {
      id: '001',
      name: 'English'
    }],
    isShow: false
    // current: {}
  }
  onLoad() {
  }
  methods = {
    optionTap(e) {
      let dataset = e.target.dataset
      this.current = dataset
      this.isShow = false

      // 调用父组件方法，并传参
      this.methods.changeLanguage({ ...dataset })
      // this.$emit("change", { ...dataset })
    },
    openClose() {
      this.isShow = !this.isShow
    },

    // 此方法供父组件调用
    close() {
      this.isShow = false
    }
  }
  // lifetimes = {
  //   attached() {
  //     console.log(this.options)
  //     // 属性名称转换, 如果不是 { id: '', name:'' } 格式，则转为 { id: '', name:'' } 格式
  //     let result = []
  //     if (this.key !== 'id' || this.text !== 'name') {       
  //       for (let item of this.options) {
  //         let { [this.key]: id, [this.text]: name } = item
  //         result.push({ id, name })
  //       }
  //     }
  //     this.current = Object.assign({}, this.defaultOption)
  //     this.result =  result
  //   }
  // }
}
</script>
<style>
  .select-box {
    position: relative;
    width: 100%;
    font-size: 30rpx;
  }

  .select-current {
    position: relative;
    width: 100%;
    padding: 0 10rpx;
    line-height: 70rpx;
    /* border: 1rpx solid #ddd; */
    border-radius: 6rpx;
    box-sizing: border-box;
  }

  .select-current::after {
    position: absolute;
    display: block;
    right: 16rpx;
    top: 30rpx;
    content: '';
    width: 0;
    height: 0;
    border: 10rpx solid transparent;
    border-top: 10rpx solid #999;
  }

  .current-name {
    display: block;
    width: 85%;
    height: 100%;
    word-wrap: normal;
    overflow: hidden;
  }

  .option-list {
    position: absolute;
    left: 0;
    /* top: 76rpx; */
    width: 100%;
    padding: 12rpx 20rpx 10rpx 20rpx;
    border-radius: 6rpx;
    box-sizing: border-box;
    z-index: 99;
    /* box-shadow: 0rpx 0rpx 1rpx 1rpx rgba(0, 0, 0, 0.2) inset; */
    background-color: #fff;
  }

  .option {
    display: block;
    width: 100%;
    line-height: 70rpx;
    border-bottom: 1rpx solid #eee;
  }

  .option:last-child {
    border-bottom: none;
    padding-bottom: 0;
  }
</style>